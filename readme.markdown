<!-- ********************************************************************
     Copyright 2013 Ellucian Company L.P. and its affiliates.
******************************************************************** -->

# TODO list for work (turn into Jira)

# Things to consider (may need user stories)
* Define strategy and guidelines for retaining version-specific representations. Can the general marshallers be used at all?  If so, are tests sufficient to drive develpment of version-specific marshallers?  Need discussion, and Shane input...
* Firm up contract with service save() method (what is returned in the result, optional id only, etc)
* Firm up contract with service save, update, and delete methods.  Do they get the full request params, or only the extracted resource representation?
* Support for Date binding.  Investigate grails.converters.json.date = 'javascript'
* Do we need to pass the type of action to the error handlers, in order to generate more specific error messages?
* The support for ApplicationException passes in a localizer, but not the name of the resource.  This prevents messages generated by ApplicationException from referring to resource names (it will have to generate messages for domain names).  Change contract with ApplicationException to pass in both a localizer, and the localized resource name?
* Generic JSON representation in XML does not check for JSON property names that are invalid in xml (contain whitespace, etc)
* Generic JSON representation in XML may need a meta-data driven facility to map JSON property names to different xml names
* Generic JSON representation in XML may need type information on literals?
* Generic JSON representation in XML may need a schema for the xml representation defined (so clients can use data-binding tools on the JSON as xml schema)?


# Code review items
* Changed 409 responses to not have an error block.  You already know the requested resource, and the 409 response communicates that it's an optimistic lock.  An error block would be redundant information.
* Changes to message generation
* Code review of ApplicationException support.
* With ApplicationException supported, do we need the configurable OptimisticLock exception support, or should it be removed, and our approach be to introduce handling of more exceptions (like other OptimisticLock classes) via ApplicationException?
* Verify status, message, headers, errors contract with ApplicationException.  We are excluding modelValidationErrorsMaps, is this ok?

# Code cleanup tasks
* Remove unused codes from message.properties
* Do the default messages belong in the plugin message.properties, since they are used by the plugin, and not the test app?

# Current Status
* Created an initial plugin project and test-app (that uses an in-memory database versus a Banner dependency)
* Partially implemented a generic controller with content negotiation that selects a registered marshaller. (Only show/list are implemented.)
* Implemented a generic 'basic' marhsaller, and a placeholder for a generic 'HAL' marshaller
* Implemented a trivial resource-specific marshaller
* Implemented initial functional test to prove use of various marshallers
* Implemented support for converting urls to resource names (e.g., part-of-things ==> PartOfThing) that leverages the 'inflector' plugin
* Demonstrate use of resource-specific marshallers (versus generic ones).
* Implement create/update/delete actions
* Support localization of label/title affordances (just use 'message' injected into the controller)
* Encapsulate the Inflector plugin within our own 'Inflector' class that exposes static methods (versus letting marshallers use the Inflector plugin directly)




